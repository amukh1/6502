;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_fish
	.export		_printChar
	.export		_frog
	.export		_x
	.export		_y
	.export		_c
	.export		_z
	.export		_addr_y
	.export		_s
	.export		_main

.segment	"BSS"

_x:
	.res	1,$00
_y:
	.res	2,$00
_c:
	.res	1,$00
_z:
	.res	2,$00
_addr_y:
	.res	2,$00
_s:
	.res	2,$00

; ---------------------------------------------------------------
; int __near__ fish (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fish: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ printChar (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printChar: near

.segment	"CODE"

	jsr     pusha
	lda     sp
	ldx     sp+1
	jsr     pushax
	nop
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; int __near__ frog (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frog: near

.segment	"CODE"

	lda     #70
	sta     $00
	lda     #$00
	sta     $FFFC
	sta     $FFFD
	lda     #$80
	sta     $FFFB
	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #$0C
	sta     _x
	lda     #$06
	sta     _c
	lda     _x
	sta     $0010
	lda     #<(_x)
	ldx     #>(_x)
	sta     _y
	stx     _y+1
	sta     $0014
	stx     $0014+1
	lda     $0200+1
	sta     _z+1
	lda     $0200
	sta     _z
	lda     _y
	ldx     _y+1
	sta     _addr_y
	stx     _addr_y+1
	sta     $0014
	stx     $0014+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _z+1
	dey
	lda     (ptr1),y
	sta     _z
	lda     #$34
	sta     _z+1
	lda     #$12
	sta     _z
	ldx     #$00
	lda     #$10
	rts

.endproc

